Date & Time: 10/30/2017, 4:30 PM
Session 9: Privacy
Talk Title: Atom: Horizontally Scaling Strong Anonymity
Speaker Name: Albert Kwon 
Key points:

Motivation: users would like to post to a message board, and we would like to keep the names of posters anonymous.

Anonymous networks address this problem. Tor scales and has good latency and scalability, but its guarantees are weak. Riposte is less scalable and has weaker performance, but is more secure. Atom achieves latency and security.

A constant fraction of servers are assumed to be malicious. Servers are grouped, and one server in the group is assumed honest. Users encrypt messages and send them to the first group. The first group decrypts the messages, shuffles them, re-encrypts them, and then sends them to the next layer. This process continues.

Challenges: 1) must ensure each group has at least one honest server, 2) protocol for decrypting and re-encrypting is non-trivial. 3) Must defend against active attacks which do not respect the protocol. 4) Tolerating server churn

Challenge 1 is trivial - randomly select k servers; probability that all are malicious is 0.2**k

Challenge 3: Send trap messages along with real messages generated by a trusted third party. At the end of the round, the trusted third party checks that the trap messages are as expected. The trusted third party only reveals the plaintexts if the traps were not tampered with. There are probabilistic guarantees about this trap-based defense.

Paper includes a second approach for defending against active attacks based on zero knowledge proofs.

Results show that latency is proportional to the number of servers. There is a 23X improvement compared to Riposte.

Atom has medium to high latency.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Date & Time: 10/30/2017, 4:55 PM
Session 9: Privacy
Talk Title: Stadium: A Distributed Metadata-Private Messaging System
Speaker Name: Nirvan Tyagi 
Key points:

The goal of stadium is to provide 1-to-1 private messaging. This goal includes hiding communication metadata, e.g., the sender/receiver.

Prior work provides cryptographic security about metadata, but has significantly limited throughput. Vuvuzela relaxes security to differential privacy for higher, but still weak, throughput. Stadium improves onthe throughput of vuvuzela.

In vuvuzela, dea-drops are virtual addresses at which the user sends a message. Mix-nets randomize destinations and re-send messages. Fake messages are shuffled in. It does not scale horizontally.

Stadium approach: noise messages are shuffled in collaboratively. Mix-nets are grouped into sub-nets that compute in parallel. Stadium has differential privacy guarantees. Stadium limits mixnet depth to 2.

Traffic analysis attacks are eliminated by padding; dummy messages are added so that adversaries cannot tell how many messages are sent to each server.

Problem: scaling noise generation. Vuvuzela injects noise with a single server. Stadium injects noise using many servers - each server samples independent Poissan probability distributions 

Multidimensional differential privacy analysis. There are many variables which require noise. When a user changes communication patterns, only a fraction of the paths are affected, so the noise requirement can be reduced.

Implemented prototype in Go. Deployed a multi-node implementation of Stadium on EC2. 

Q & A:
Q1: Is it that all servers combined provide enough noise to generate differential privacy or an individual server?
A1: In Stadium it is assumed that some servers are honest, and the noise generated by this fraction of servers is sufficient.
Q2: You can get away with fewer servers than atom. Why is that?
A2: The number of servers needed can be tuned. Stadium can tolerate fewer in part because it has differential rather than cryptographic guarantees?
Q3: In differential privacy there is a budget. What happens when that budget runs out?
A3: We use a small amount of the budget in each round. 
Q4: What if an adversary controls the first and last server in every group?
A4: Noise is added in one step at the start, not in each anytrust group.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Date & Time: 10/30/2017, 5:20PM
Session 9: Privacy
Talk Title: Prochlo: Strong Privacy for Analytics in the Crowd
Speaker Name: Ulfar Erlingsson
Key points:

I would like to remember the first author of the paper who passed away in a traffic accident.

Consider an app with millions of apps and wide APIs. We want to know which APIs can be deprecated. We need to know which APIs are used. But the usage patterns convey secrets. How do we do this without violating privacy

Answer: Encode, Shuffle, Analyze architecture. Prochlo is an SGX-based platform for doing this.

Naive strategy: just publish results when there are many users. There are many well-established attacks against this approach. Most solutions require reasoning about what the attacker knows which is hard. 

Differential privacy does not require reasoning about what the attacker might know. However, differential privacy requires protecting a database indefinitely. 

We can get an estimate using a randomized response. 

Noise grows at square root of number of reports, but this is much worse in practice so it does not scale well.

There are other encodings which include filtering, sampling, fragmenting, and secret-sharing. Fragmenting has the nice property that popular apps allow users to ¡°hide in the crowd¡±. Shuffling breaks linkability between fragments. Using a crowd threshold gives differential privacy.

Shuffling must be protected and isolated. Prochlo relies on SGX. 

For 10M - 200M nodes, Prochlo acieves a permutation strength of 2**-80 to 2**-64. 

Q & A:
Q1: Given that you are using SGX, how is the ¡°just trust Intel¡± better than ¡°just trust Google¡±?
A1: We tried to come up with an architecture that matches best-practice. Best practice includes protecting data as soon as it arrives and as computation is being done. Using SGX gives more guarantees to users.

Q2: One thing that people like about differential privacy is that is amenable to formal analysis. Is the presented design amenable to formal analysis?
A2: Each step has formal, strong, provably-correct formal guarantee. The same is true of the architecture composed of each step.